@echo off

setlocal
rem ============================================================

set PROJECT_NAME=swizzle

set SCRIPT_DIR=%@LEFT[-1,%@PATH["%_batchname"]]
set BUILD_DIR=%SCRIPT_DIR\build\tmake
set SOURCE_DIR=%SCRIPT_DIR\src

rem Semicolon-delimited, relative to SOURCE_DIR
set SOURCE_FILES=swizzle.c

set PCH_HEADER=pch.h
set PCH_SOURCE=pch.c
set PCH_FILE=%BUILD_DIR\obj\%PROJECT_NAME.pch
set PCH_CREATE_FLAGS=`/Yc"pch.h" /Fp"%PCH_FILE%"`
set PCH_USE_FLAGS=`/Yu"pch.h" /Fp"%PCH_FILE%"`

rem Note the double backslash in the /Fo path
set CL_CMD=`cl.exe /c /permissive- /GS- /sdl- /Gy- /Zc:wchar_t /Zc:forScope /Ox /Oi` ^
           `/D "NDEBUG" /D "_WINDOWS" /D "_USRDLL" /D "_WINDLL" /D "_UNICODE" /D "UNICODE"` ^
           `/W3 /WX /wd"5105" /std:c11 /Gd /MD /Fo"%BUILD_DIR%\obj\\" %PCH_FLAGS /diagnostics:column` ^
           `/nologo %SRC_FILES`

set LINK_CMD=`link.exe /SUBSYSTEM:WINDOWS /NXCOMPAT /DYNAMICBASE /MACHINE:X64 /OPT:REF /INCREMENTAL:NO` ^
             `/OUT:"%BUILD_DIR\out\%PROJECT_NAME.dll" /IMPLIB:"%BUILD_DIR\out\%PROJECT_NAME.lib" /DLL` ^
             `/MANIFESTUAC:NO /MANIFEST /ManifestFile:"%BUILD_DIR\out\%PROJECT_NAME.dll.manifest"` ^
             `/LIBPATH:"%SCRIPT_DIR\lib"` ^
             `"TakeCmd.lib" "kernel32.lib" "user32.lib" "gdi32.lib" "advapi32.lib"` ^
             `/nologo %OBJ_FILES`

rem Parse command line
set VERBOSE=0
set DEBUG=0
set FORCE=0

IF %@PARSE[".",/V,0] != 0 set VERBOSE=1
IF %@PARSE[".",/D,0] != 0 set DEBUG=1
IF %@PARSE[".",/F,0] != 0 set FORCE=1

IFF %@PARSE[".",/?,0] != 0 THEN
TEXT
Usage: tmake.btm [/V] [/D] [/F]

/V = verbose output
/D = debug mode
/F = force rebuild
/C = clean build directory
ENDTEXT
QUIT
ENDIFF

IFF %@PARSE[".",/C,0] != 0 THEN
  rmdir /Q /S "%BUILD_DIR"
  quit
ENDIFF

rem Create necessary directories
IF NOT ISDIR "%BUILD_DIR\obj" (IF %VERBOSE == 1 echo Creating "%BUILD_DIR\obj"... & mkdir /S "%BUILD_DIR\obj")
IF NOT ISDIR "%BUILD_DIR\out" (IF %VERBOSE == 1 echo Creating "%BUILD_DIR\out"... & mkdir /S "%BUILD_DIR\out")
             
rem First we build the PCH file
gosub OutOfDateFiles "%SOURCE_DIR" "%PCH_HEADER;%PCH_SOURCE" file "%PCH_FILE" none %FORCE
IFF %_? == 0 THEN
  set SRC_FILES=%SOURCE_DIR\%PCH_SOURCE
  set PCH_FLAGS=%PCH_CREATE_FLAGS
  IF %VERBOSE == 1 echo %CL_CMD
  %CL_CMD
  if %? NEQ 0 QUIT
ENDIFF

rem Then compile source files
GOSUB OutOfDateFiles "%SOURCE_DIR" "%SOURCE_FILES" dir "%BUILD_DIR\obj" .obj %FORCE
IFF %_? == 0 THEN
  set TMPFILE="%@UNIQUE["%BUILD_DIR",CL]"
  gosub WritePathEntries %TMPFILE %NEWER_SOURCE_FILES
  set SRC_FILES=@%TMPFILE
  set PCH_FLAGS=%PCH_USE_FLAGS
  IF %VERBOSE EQ 1 echo %CL_CMD
  %CL_CMD
  if %? NEQ 0 QUIT
  IF %DEBUG NEQ 1 del /Q %TMPFILE
ENDIFF

rem Gather a list of object files that were built from source files.
set OBJ_FILES=
DO file IN /T";" /L %SOURCE_FILES%
  GOSUB PathAppend OBJ_FILES %@NAME[%file].obj
ENDDO
GOSUB OutOfDateFiles "%BUILD_DIR\obj" "%OBJ_FILES" file "%BUILD_DIR\out\%PROJECT_NAME.dll" none %FORCE
IFF %_? EQ 0 THEN
  rem Remember to add the PCH .obj file!
  set OBJ_FILES=%@NAME[%PCH_SOURCE].obj;%OBJ_FILES
  
  rem Prepend the object directory to each object file name
  DO entry IN /T";" /L %OBJ_FILES
    GOSUB PathAppend OBJPATHS %BUILD_DIR\obj\%entry
  ENDDO
  
  rem Run link with a command file
  set TMPFILE="%@UNIQUE["%BUILD_DIR",LN1]"
  gosub WritePathEntries %TMPFILE %OBJPATHS
  set OBJ_FILES=@%TMPFILE
  IF %VERBOSE EQ 1 echo %LINK_CMD
  %LINK_CMD
  if %? NEQ 0 QUIT
  IF %DEBUG NEQ 1 del /Q %TMPFILE
ENDIFF

QUIT

rem ------------------------------------------------------------
rem ------------------ SUBROUTINES  ----------------------------
rem ------------------------------------------------------------

COMMENT
-------------------------------------------------------------------
Tests whether file 'dest' is up-to-date with respect to file 'src'.
%_? is set to 0 if so, or 1 if not
-------------------------------------------------------------------
ENDCOMMENT
:FileUpToDate [src dest]
IFF NOT ISFILE %src THEN
  RETURN 0
ELSEIFF NOT ISFILE %dest THEN
  RETURN 1
ELSEIFF %@FILEAGE[%src] GT %@FILEAGE[%dest] THEN
  RETURN 1
ELSE
  RETURN 0
ENDIFF

COMMENT
-------------------------------------------------------------------
Gathers a list of out-of-date files.
    srcdir - source directory
  srcfiles - semicolon-separated list of files, relative to srcdir
  desttype - either "dir" or "file"
      dest - either a destination directory or file, depending on the value of desttype
  remapext - if desttype is "dir", the extensions of srcfiles will be replaced by
             remapext when performing the up-to-date check. Include the "." when
             passing remapext (ex. ".obj").
     force - if set to 1, then no timestamp comparisons will performed, and files will
             always be considered out-of-date.

The sub sets %_? to 0 if any destination files are out-of-date, and to 1 otherwise.
If %_? is 0, then the NEWER_SOURCE_FILES environment variable will be set to a
semicolon-delimited list of those *source* files that are *newer* than their 
corresponding destination file, and OUTOFDATE_DEST_FILES will be set to the
list of destination files that are older than their corresponding source file.
Note that the filenames in these lists may or may not actually exist.

All filenames in these lists will not be surrounded by double-quotes.
-------------------------------------------------------------------
ENDCOMMENT
:OutOfDateFiles [srcdir srcfiles desttype dest remapext force]
SET _srcdir=%@RTRIM[\,%@UNQUOTES[%srcdir]]
IFF %desttype == dir THEN set destdir=%@RTRIM[\,%@UNQUOTES[%dest]]
ELSEIFF %desttype == file THEN set destfile=%dest
ENDIFF
unset NEWER_SOURCE_FILES OUTOFDATE_DEST_FILES
DO _file IN /T";" /L %@UNQUOTES[%srcfiles]
  set _file=%@UNQUOTES[%@trim[%_file]]
  IF %@LEN[%_file] == 0 ITERATE
  set srcfile=%_srcdir\%_file
  IF %VERBOSE EQ true ECHOS Checking %srcfile against ``
  IF %desttype == dir SET destfile=%destdir\%@PATH["%_file"]%@NAME["%_file"]%remapext
  IF %VERBOSE EQ true ECHO %destfile
  IFF %force == 1 THEN
    set R=1
  ELSE
    GOSUB FileUpToDate "%srcfile" "%destfile"
    set R=%_?
  ENDIFF
  IFF %R == 1 THEN
    set NEWER_SOURCE_FILES=%NEWER_SOURCE_FILES;%srcfile
    IFF %desttype == dir THEN
      set OUTOFDATE_DEST_FILES=%OUTOFDATE_DEST_FILES;%destfile
    ELSEIFF %desttype == file THEN
      set OUTOFDATE_DEST_FILES=%destfile
    ENDIFF
  ENDIFF
ENDDO
unset _file
IFF %@LEN[%NEWER_SOURCE_FILES] != 0 THEN
  SET NEWER_SOURCE_FILES=%@LTRIM[;,%NEWER_SOURCE_FILES]
  SET OUTOFDATE_DEST_FILES=%@LTRIM[;,%OUTOFDATE_DEST_FILES]
  return 0
ELSE
  RETURN 1
ENDIFF

COMMENT
Write the entries in a given semicolon-delimited path to a text file.
ENDCOMMENT
:WritePathEntries [outputfile pathentries*]
set _handle=%@FILEOPEN[%outputfile,write,t]
DO _entry IN /T";" /L %pathentries
  echo %@FILEWRITE[%_handle,%_entry] > NUL
ENDDO
echo %@FILECLOSE[%_handle] > NUL
unset _entry _handle
RETURN

COMMENT
Append an entry to a path-like structure.
ENDCOMMENT
:PathAppend [varname entry*]
IF %@LEN[%[%varname]] != 0 set %varname=%[%varname];
set %varname=%[%varname]%entry
return

rem ============================================================
endlocal
