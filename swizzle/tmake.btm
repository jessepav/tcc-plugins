@echo off

setlocal
rem ============================================================

set PROJECT_NAME=swizzle

set SCRIPT_DIR=%@LEFT[-1,%@PATH["%_batchname"]]
set BUILD_DIR=%SCRIPT_DIR\build\tmake
set SOURCE_DIR=%SCRIPT_DIR\src

rem Semicolon-delimited, relative to SOURCE_DIR
set SOURCE_FILES=swizzle.c;functions.c

set PCH_HEADER=pch.h
set PCH_SOURCE=pch.c
set PCH_FILE=%BUILD_DIR\obj\%PROJECT_NAME.pch
set PCH_CREATE_FLAGS=`/Yc"pch.h" /Fp"%PCH_FILE%"`
set PCH_USE_FLAGS=`/Yu"pch.h" /Fp"%PCH_FILE%"`

rem Note the double backslash in the /Fo path
set CL_CMD=`cl.exe /c /permissive- /GS- /sdl- /Gy- /Zc:wchar_t /Zc:forScope /Ox /Oi` ^
           `/D "NDEBUG" /D "_WINDOWS" /D "_USRDLL" /D "_WINDLL" /D "_UNICODE" /D "UNICODE"` ^
           `/W3 /WX /wd"5105" /std:c11 /Gd /MD /Fo"%BUILD_DIR%\obj\\" %PCH_FLAGS /diagnostics:column` ^
           `/nologo %SRC_FILES`

set LINK_CMD=`link.exe /SUBSYSTEM:WINDOWS /NXCOMPAT /DYNAMICBASE /MACHINE:X64 /OPT:REF /INCREMENTAL:NO` ^
             `/OUT:"%BUILD_DIR\out\%PROJECT_NAME.dll" /IMPLIB:"%BUILD_DIR\out\%PROJECT_NAME.lib" /DLL` ^
             `/MANIFESTUAC:NO /MANIFEST /ManifestFile:"%BUILD_DIR\out\%PROJECT_NAME.dll.manifest"` ^
             `/LIBPATH:"%SCRIPT_DIR\lib"` ^
             `"TakeCmd.lib" "kernel32.lib" "user32.lib" "gdi32.lib" "advapi32.lib"` ^
             `/nologo %OBJ_FILES`

rem Parse command line
set VERBOSE=0
set DEBUG=0
set FORCE=0
set USEPCH=0

IFF %# NEQ 0 THEN
  DO arg IN /Q %*
    IF %arg == /V (set VERBOSE=1 & ITERATE)
    IF %arg == /D (set DEBUG=1 & ITERATE)
    IF %arg == /F (set FORCE=1 & ITERATE)
    IF %arg == /P- (set USEPCH=0 & ITERATE)
    IF %arg == /P+ (set USEPCH=1 & ITERATE)
    IF %arg == /C (echo Cleaning build dir... & rmdir /Q /S "%BUILD_DIR" & QUIT)
    IF %arg == /H (GOSUB ScanHeaders & QUIT)
    IF %arg == /? (GOSUB ShowHelp & QUIT)
    
    echo Unrecognized argument: "%arg" & QUIT
  ENDDO
ENDIFF

rem Create necessary directories
IF NOT ISDIR "%BUILD_DIR\obj" (IF %VERBOSE == 1 echo Creating "%BUILD_DIR\obj"... & mkdir /S "%BUILD_DIR\obj")
IF NOT ISDIR "%BUILD_DIR\out" (IF %VERBOSE == 1 echo Creating "%BUILD_DIR\out"... & mkdir /S "%BUILD_DIR\out")
             
rem First we build the PCH file
IFF %USEPCH == 1 THEN
  gosub OutOfDateFiles "%SOURCE_DIR" "%PCH_HEADER;%PCH_SOURCE" file "%PCH_FILE" none %FORCE
  IFF %_? == 0 THEN
    set SRC_FILES=%SOURCE_DIR\%PCH_SOURCE
    set PCH_FLAGS=%PCH_CREATE_FLAGS
    IF %VERBOSE == 1 echo %CL_CMD
    %CL_CMD
    if %? NEQ 0 QUIT
  ELSEIFF %VERBOSE == 1 THEN
    echo PCH is up-to-date.
  ENDIFF
ENDIFF

rem Then compile source files
GOSUB OutOfDateFiles "%SOURCE_DIR" "%SOURCE_FILES" dir "%BUILD_DIR\obj" .obj %FORCE
IFF %_? == 0 THEN
  set TMPFILE="%@UNIQUE["%BUILD_DIR",CL]"
  gosub WritePathEntries %TMPFILE %NEWER_SOURCE_FILES
  set SRC_FILES=@%TMPFILE
  IF %USEPCH == 1 (set PCH_FLAGS=%PCH_USE_FLAGS) ELSE (set PCH_FLAGS=)
  IF %VERBOSE EQ 1 echo %CL_CMD
  %CL_CMD
  if %? NEQ 0 QUIT
  IF %DEBUG NEQ 1 del /Q %TMPFILE
ELSEIFF %VERBOSE == 1 THEN
  echo Object files are up-to-date.
ENDIFF

rem Gather a list of object files that were built from source files.
set OBJ_FILES=
DO file IN /T";" /L %SOURCE_FILES%
  GOSUB PathAppend OBJ_FILES %@NAME[%file].obj
ENDDO
GOSUB OutOfDateFiles "%BUILD_DIR\obj" "%OBJ_FILES" file "%BUILD_DIR\out\%PROJECT_NAME.dll" none %FORCE
IFF %_? EQ 0 THEN
  rem Remember to add the PCH .obj file!
  IF %USEPCH == 1 set OBJ_FILES=%@NAME[%PCH_SOURCE].obj;%OBJ_FILES
  
  rem Prepend the object directory to each object file name
  DO entry IN /T";" /L %OBJ_FILES
    GOSUB PathAppend PATHENTRIES %BUILD_DIR\obj\%entry
  ENDDO
  
  rem Run link with a command file
  set TMPFILE="%@UNIQUE["%BUILD_DIR",LN1]"
  gosub WritePathEntries %TMPFILE %PATHENTRIES
  set OBJ_FILES=@%TMPFILE
  IF %VERBOSE EQ 1 echo %LINK_CMD
  %LINK_CMD
  if %? NEQ 0 QUIT
  IF %DEBUG NEQ 1 del /Q %TMPFILE
ELSEIFF %VERBOSE == 1 THEN
  echo Output file is up-to-date.
ENDIFF

QUIT

rem ------------------------------------------------------------
rem ------------------ SUBROUTINES  ----------------------------
rem ------------------------------------------------------------

COMMENT
-------------------------------------------------------------------
Tests whether file 'dest_' is up-to-date with respect to file 'src_'.
%_? is set to 0 if so, or 1 if not
-------------------------------------------------------------------
ENDCOMMENT
:FileUpToDate [src_ dest_]
IFF NOT ISFILE %src_ THEN
  RETURN 0
ELSEIFF NOT ISFILE %dest_ THEN
  RETURN 1
ELSEIFF %@FILEAGE[%src_] GT %@FILEAGE[%dest_] THEN
  RETURN 1
ELSE
  RETURN 0
ENDIFF

COMMENT
-------------------------------------------------------------------
Gathers a list of out-of-date files.
    srcdir_ - source directory
  srcfiles_ - semicolon-separated list of files, relative to srcdir
  desttype_ - either "dir" or "file"
      dest_ - either a destination directory or file, depending on the value of desttype
  remapext_ - if desttype is "dir", the extensions of srcfiles will be replaced by
              remapext when performing the up-to-date check. Include the "." when
              passing remapext (ex. ".obj").
     force_ - if set to 1, then no timestamp comparisons will performed, and files will
             always be considered out-of-date.

The sub sets %_? to 0 if any destination files are out-of-date, and to 1 otherwise.
If %_? is 0, then the NEWER_SOURCE_FILES environment variable will be set to a
semicolon-delimited list of those *source* files that are *newer* than their 
corresponding destination file, and OUTOFDATE_DEST_FILES will be set to the
list of destination files that are older than their corresponding source file.
Note that the filenames in these lists may or may not actually exist.

All filenames in these lists will not be surrounded by double-quotes.
-------------------------------------------------------------------
ENDCOMMENT
:OutOfDateFiles [srcdir_ srcfiles_ desttype_ dest_ remapext_ force_]
SET _srcdir=%@RTRIM[\,%@UNQUOTES[%srcdir_]]
IFF %desttype_ == dir THEN set _destdir=%@RTRIM[\,%@UNQUOTES[%dest_]]
ELSEIFF %desttype_ == file THEN set _destfile=%dest_
ENDIFF
unset NEWER_SOURCE_FILES OUTOFDATE_DEST_FILES
DO _file IN /T";" /L %@UNQUOTES[%srcfiles_]
  set _file=%@UNQUOTES[%@trim[%_file]]
  IF %@LEN[%_file] == 0 ITERATE
  set _srcfile=%_srcdir\%_file
  IF %VERBOSE EQ true ECHOS Checking %_srcfile against ``
  IF %desttype_ == dir SET _destfile=%_destdir\%@PATH["%_file"]%@NAME["%_file"]%remapext_
  IF %VERBOSE EQ true ECHO %_destfile
  IFF %force_ == 1 THEN
    set _R=1
  ELSE
    GOSUB FileUpToDate "%_srcfile" "%_destfile"
    set _R=%_?
  ENDIFF
  IFF %_R == 1 THEN
    GOSUB PathAppend NEWER_SOURCE_FILES %_srcfile
    IFF %desttype_ == dir THEN
      GOSUB PathAppend OUTOFDATE_DEST_FILES %_destfile
    ELSEIFF %desttype_ == file THEN
      set OUTOFDATE_DEST_FILES=%_destfile
    ENDIFF
  ENDIFF
ENDDO
unset _file _srcdir _srcfile _destdir _destfile _R
RETURN %@IF[%@LEN[%NEWER_SOURCE_FILES] != 0,0,1]

COMMENT
Write the entries in a given semicolon-delimited path to a text file.
ENDCOMMENT
:WritePathEntries [outputFile_ pathEntries_*]
set _handle=%@FILEOPEN[%outputFile_,write,t]
DO _entry IN /T";" /L %pathEntries_
  echo %@FILEWRITE[%_handle,%_entry] > NUL
ENDDO
echo %@FILECLOSE[%_handle] > NUL
unset _entry _handle
RETURN

COMMENT
Append an entry to a path-like structure.
ENDCOMMENT
:PathAppend [varname_ entry_*]
IF %@LEN[%[%varname_]] != 0 set %varname_=%[%varname_];
set %varname_=%[%varname_]%entry_
return

:ScanHeaders
set _updated=0
DO _header IN /P ffind /B /S "%SOURCE_DIR"\*.h;*.hpp
  rem Note that we're escaping the '.' for regex search
  set _headerRegex=%@NAME[%_header].%@EXT[%_header]
  DO _srcfile IN /T";" /L %SOURCE_FILES
    set _srcfile=%SOURCE_DIR\%_srcfile
    IFF %@LEN[%@EXECSTR[ffind /8 /F /B /E"(?i)#include.*%_headerRegex" "%_srcfile"]] != 0 THEN
      GOSUB FileUpToDate "%_header" "%_srcfile"
      IF %_? == 1 (echo Updating modtime of "%_srcfile" & touch /Q "%_srcfile" & set _updated=1) 
    ENDIFF
  ENDDO
ENDDO
IF %_updated == 0 echo No source files are older than their included source headers.
unset _updated _header _headerRegex _srcfile
RETURN

:ShowHelp
TEXT
Usage: tmake.btm [/V] [/D] [/F]

/V      = verbose output
/D      = debug mode
/F      = force rebuild
/C      = clean build directory
/P[+|-] = enable/disable PCH
/H      = scan header includes and update source timestamps
ENDTEXT
RETURN

rem ============================================================
endlocal
